#!/usr/bin/env python

import sys
import argparse
import logging

import geotiler

class BadComposure(Exception):
    pass

parser = argparse.ArgumentParser()
usage = """
There are three ways to set a map coverage area.

1) Center, zoom, and size: create a map of the specified size,
   centered on a given geographical point at a given zoom level:

   python compose.py -p OPENSTREETMAP -d 800 800 -c 37.8 -122.3 -z 11 out.jpg

2) Extent and size: create a map of the specified size that
   adequately covers the given geographical extent:

   python compose.py -p MICROSOFT_ROAD -d 800 800 -e 36.9 -123.5 38.9 -121.2 out.png

3) Extent and zoom: create a map at the given zoom level that covers
   the precise geographical extent, at whatever pixel size is necessary:
   
   python compose.py -p BLUE_MARBLE -e 36.9 -123.5 38.9 -121.2 -z 9 out.jpg
"""

parser.add_argument(
    '-v', '--verbose', dest='verbose', help='Make a bunch of noise',
    action='store_true'
)

parser.add_argument(
    '-c', '--center', dest='center', nargs=2, type=float,
    help='Center of the map (lon, lat), e.g.: -122.263 37.804'
)

parser.add_argument(
    '-e', '--extent', dest='extent', nargs=4, type=float,
    help='Geographical map extent. Two lat, lon pairs'
)

parser.add_argument('-z', '--zoom', dest='zoom', type=int, help='Zoom level')

parser.add_argument(
    '-s', '--size', dest='size', nargs=2, type=int,
    help='Size of map image'
)

providers = list(sorted(geotiler.provider.conf.PROVIDERS.keys()))
parser.add_argument(
    'provider', choices=providers,
    help='Map provider or URL template like "http://example.com/{z}/{x}/{y}.png".'
)

parser.add_argument('-k', '--apikey', dest='apikey')
parser.add_argument('output', help='Output file')

args = parser.parse_args()
outfile = args.output

if args.provider.startswith('cloudmade_'):
    if not args.apikey:
        raise BadComposure("Error: Cloudmade provider requires an API key. Register at http://developers.cloudmade.com/")

    provider = ModestMaps.builtinProviders[args.provider](args.apikey)
elif args.provider.startswith('http://'):
    provider = ModestMaps.Providers.TemplatedMercatorProvider(args.provider)
elif args.provider.startswith('https://'):
    provider = ModestMaps.Providers.TemplatedMercatorProvider(args.provider)
elif args.provider.startswith('file://'):
    args = ModestMaps.Providers.TemplatedMercatorProvider(args.provider)
else:
    provider = geotiler.find_provider(args.provider)

map = geotiler.Map(
    extent=args.extent,
    center=args.center,
    zoom=args.zoom,
    size=args.size,
    provider=provider
)

if args.verbose:
    logging.basicConfig(level=logging.DEBUG)
    logger = logging.getLogger(__name__)
    logger.debug('{} {} -> {} {}'.format(map.origin, map.offset, outfile, map.size))

img = geotiler.render_map(map)
img.save(outfile)

# vim:et sts=4 sw=4:
