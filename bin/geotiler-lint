#!/usr/bin/env python

import sys
import argparse
import logging

import geotiler

class BadComposure(Exception):
    pass

parser = argparse.ArgumentParser()
usage = """
There are three ways to set a map coverage area.

1) Center, zoom, and dimensions: create a map of the specified size,
   centered on a given geographical point at a given zoom level:

   python compose.py -p OPENSTREETMAP -d 800 800 -c 37.8 -122.3 -z 11 out.jpg

2) Extent and dimensions: create a map of the specified size that
   adequately covers the given geographical extent:

   python compose.py -p MICROSOFT_ROAD -d 800 800 -e 36.9 -123.5 38.9 -121.2 out.png

3) Extent and zoom: create a map at the given zoom level that covers
   the precise geographical extent, at whatever pixel size is necessary:
   
   python compose.py -p BLUE_MARBLE -e 36.9 -123.5 38.9 -121.2 -z 9 out.jpg
"""

parser.add_argument(
    '-v', '--verbose', dest='verbose', help='Make a bunch of noise',
    action='store_true'
)

parser.add_argument(
    '-c', '--center', dest='center', nargs=2,
    help='Center of the map (lon, lat), e.g.: -122.263 37.804', type=float
)

parser.add_argument(
    '-e', '--extent', dest='extent', nargs=4,
    help='Geographical map extent. Two lat, lon pairs', type=float
)

parser.add_argument('-z', '--zoom', dest='zoom', help='Zoom level', type=int)

parser.add_argument(
    '-d', '--dimensions', dest='dimensions', nargs=2,
    help='Pixel dimensions of image', type=int
)

providers = list(sorted(geotiler.provider.conf.PROVIDERS.keys()))
parser.add_argument(
    'provider', choices=providers,
    help='Map provider or URL template like "http://example.com/{z}/{x}/{y}.png".'
)

parser.add_argument('-k', '--apikey', dest='apikey')
parser.add_argument('output', help='Output file')

args = parser.parse_args()
outfile = args.output

try:
    if args.provider.startswith('cloudmade_'):
        if not options.apikey:
            raise BadComposure("Error: Cloudmade provider requires an API key. Register at http://developers.cloudmade.com/")

        provider = ModestMaps.builtinProviders[args.provider](args.apikey)
    elif args.provider.startswith('http://'):
        provider = ModestMaps.Providers.TemplatedMercatorProvider(args.provider)
    elif args.provider.startswith('https://'):
        provider = ModestMaps.Providers.TemplatedMercatorProvider(args.provider)
    elif args.provider.startswith('file://'):
        args = ModestMaps.Providers.TemplatedMercatorProvider(args.provider)
    else:
        provider = geotiler.find_provider(args.provider)
except KeyError:
    raise BadComposure('Error: bad provider "%s".' % args.provider)

if args.center and args.extent:
    raise BadComposure("Error: bad map coverage, center and extent can't both be set.")

elif args.extent and args.dimensions and args.zoom:
    raise BadComposure("Error: bad map coverage, dimensions and zoom can't be set together with extent.")

elif args.center and args.zoom and args.dimensions:
    lat, lon = args.center[0], args.center[1]
    width, height = args.dimensions[0], args.dimensions[1]

    dimensions = ModestMaps.Core.Point(width, height)
    center = ModestMaps.Geo.Location(lat, lon)
    zoom = args.zoom

    map = ModestMaps.mapByCenterZoom(provider, center, zoom, dimensions)
    
elif args.extent and args.dimensions:
    map = geotiler.Map(args.extent, 0, provider=provider)
    map.size = args.dimensions

elif args.extent and args.zoom:
    map = geotiler.Map(args.extent, args.zoom, provider=provider)

else:
    raise BadComposure("Error: not really sure what's going on.")


if args.verbose:
    logging.basicConfig(level=logging.DEBUG)
    logger = logging.getLogger(__name__)
    logger.debug('{} {} -> {} {}'.format(map.coordinate, map.offset, outfile, map.dimensions))

img = geotiler.render_map(map)
img.save(outfile)

# vim:et sts=4 sw=4:
